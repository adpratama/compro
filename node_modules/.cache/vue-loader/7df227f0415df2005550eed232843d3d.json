{"remainingRequest":"/home/ian/Desktop/compro/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/ian/Desktop/compro/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ian/Desktop/compro/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ian/Desktop/compro/src/components/Contact.vue?vue&type=template&id=cf6573c0&","dependencies":[{"path":"/home/ian/Desktop/compro/src/components/Contact.vue","mtime":1600064590532},{"path":"/home/ian/Desktop/compro/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ian/Desktop/compro/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/ian/Desktop/compro/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ian/Desktop/compro/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}